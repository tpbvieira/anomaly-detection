package com.example.mav3rick.readwrite;import android.util.Log;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.util.ArrayList;import java.util.List;import weka.attributeSelection.ASEvaluation;import weka.attributeSelection.AttributeSelection;import weka.attributeSelection.Ranker;import weka.classifiers.Classifier;import weka.classifiers.Evaluation;import weka.classifiers.bayes.NaiveBayes;import weka.classifiers.bayes.NaiveBayesUpdateable;import weka.classifiers.functions.GaussianProcesses;import weka.classifiers.functions.LinearRegression;import weka.classifiers.functions.MultilayerPerceptron;import weka.classifiers.functions.SMOreg;import weka.classifiers.functions.SimpleLinearRegression;import weka.classifiers.meta.AdaBoostM1;import weka.classifiers.meta.AdditiveRegression;import weka.classifiers.meta.Bagging;import weka.classifiers.meta.FilteredClassifier;import weka.classifiers.meta.RegressionByDiscretization;import weka.classifiers.rules.DecisionTable;import weka.classifiers.trees.DecisionStump;import weka.classifiers.trees.J48;import weka.classifiers.trees.M5P;import weka.classifiers.trees.RandomForest;import weka.classifiers.trees.RandomTree;import weka.core.Attribute;import weka.core.Debug;import weka.core.DenseInstance;import weka.core.FastVector;import weka.core.Instances;import weka.core.converters.ArffLoader;import weka.core.converters.ConverterUtils;import weka.core.Instance;import weka.filters.Filter;import weka.filters.unsupervised.attribute.PrincipalComponents;import weka.filters.unsupervised.attribute.StringToWordVector;import android.util.Log;/** * Created by Sohail on 1/10/2015. */public class Tranny {    Instances instances;    DecisionStump classifier = new DecisionStump();    PrincipalComponents pca = new PrincipalComponents();    public Tranny() {    }    //Builds Classifier    public int build(String fname) {        int flag = 0;        Instances traindata = null, newdata = null;        ArffLoader loader = new ArffLoader();        try {            loader.setFile(new File("/sdcard/kddreduced.arff"));            traindata = loader.getDataSet();            traindata.setClassIndex(traindata.numAttributes() - 1);        } catch (IOException e) {            flag = 1;            e.printStackTrace();        }        try {            pca.setInputFormat(traindata);            pca.setVarianceCovered(0.95);            pca.setMaximumAttributes(7);            newdata = Filter.useFilter(traindata, pca);        } catch (Exception e) {            e.printStackTrace();        }        ObjectOutputStream zip = null;        try {            zip = new ObjectOutputStream(new FileOutputStream("/sdcard/newdata.arff"));            zip.writeObject(newdata);            zip.close();        } catch (IOException e) {            e.printStackTrace();        }        try {            classifier.buildClassifier(newdata);        } catch (Exception e) {            flag = 2;            e.printStackTrace();        }        ObjectOutputStream out;        try {            out = new ObjectOutputStream(new FileOutputStream("/sdcard/model.txt"));            out.writeObject(classifier);            out.close();        } catch (IOException e) {            e.printStackTrace();        }        return flag;    }    //Evalutes the built Classifier model    public String evaluate (String fname) {        String [] options = new String[2];        options[0] = "-t";        options[1] = "/sdcard/"+fname+".arff";        String out = null;        try {            out = Evaluation.evaluateModel(classifier, options);        } catch (Exception e) {            e.printStackTrace();        }        return out;    }    //Classifies data    public String classify(String fname) {        Instances testdata = null, newdata = null;        int flag = 0;        ArffLoader loader = new ArffLoader();        try {            loader.setFile(new File("/sdcard/" + fname));            testdata = loader.getDataSet();            testdata.setClassIndex(testdata.numAttributes() - 1);        } catch (IOException e) {            flag = 1;            e.printStackTrace();        }        try {            pca.setInputFormat(testdata);            pca.setVarianceCovered(0.95);            pca.setMaximumAttributes(7);            newdata = Filter.useFilter(testdata, pca);        } catch (Exception e) {            e.printStackTrace();        }        String out = "";        ObjectInputStream in;        try {            in = new ObjectInputStream(new FileInputStream("/sdcard/model.txt"));            try {                Object tmp = in.readObject();                classifier = (DecisionStump) tmp;                in.close();            } catch (ClassNotFoundException e) {                e.printStackTrace();            }        } catch (IOException e) {            e.printStackTrace();        }        for(int i =0; i<newdata.numInstances(); i++)        {            try {                double pred = classifier.classifyInstance(newdata.instance(i));                out = out + "\n" +newdata.classAttribute().value( (int) pred);            } catch (Exception e) {                e.printStackTrace();            }        }        return out;    }}