id	name                            types               malware 	type    Total    	Malicious 	C&C 	Botnet 	Data Status
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
01  capture20110810.binetflow       IRC,Spam,CF       	neris		test    2824636		40961   	341		40620	OK|NO|NO|NO	
02  capture20110811.binetflow       IRC,Spam,CF       	neris		test    1808122 	20941   	673		20268	OK|NO|NI|NO
03  capture20110812.binetflow       IRC,PS,US         	rbot		train   4710638 	26822   	63		26759	OK|OK|OK|OK
04  capture20110815.binetflow       IRC,DDoS,US       	rbot		train   1121076 	2580    	52		2528	OK|NO|NO|NO data cleasing problem (1768 instead of 2580)
05  capture20110815-2.binetflow     Spam,PS,HTTP      	virut		train   129832 		901     	24		877		OK|OK|NO|NO
06  capture20110816.binetflow       PS                  menti		test    558919 		4630    	199		4431	OK|OK|OK|OK
07  capture20110816-2.binetflow     HTTP                sogou		train   114077 		63      	26		37		OK|OK|OK|OK
08  capture20110816-3.binetflow     PS                  murlo		test    2954230 	6127    	1074	5053	OK|OK|OK|OK
09  capture20110817.binetflow       IRC,Spam,CF,PS 		neris		test    2087508 	184987  	2973	182014	NO|NO|NO|NO
10  capture20110818.binetflow       IRC,DDoS,US        	rbot		train   1309791 	106352  	33		106319	OK|NO|NO|NO data cleasing problem (375 instead of 106352)
11  capture20110818-2.binetflow     IRC,DDoS,US        	rbot		train   107251 		8164   		2 		8162	OK|NO|NO|OK data cleasing problem (21 instead of 8164)
12  capture20110819.binetflow       P2P                 nsys.ay		train   325471  	2168    	25		2143 	OK|OK|OK|OK
13  capture20110815-3.binetflow     Spam,PS,HTTP      	virut		train   1925149 	40003   	536		39467	OK|NO|NO|NO

=============================================================================================================================================================================================================================

pkl                 raw in pkl format
pkl_all             raw_all in pkl format
pkl_all_test        raw_all_test in pkl format
pkl_all_train       raw_all_train in pkl format
pkl_attack          raw_attack in pkl format
pkl_cc              raw_cc in pkl format
pkl_normal          raw_normal in pkl format
raw                 raw and original files in binetflow/csv format
raw_all             raw data into one binetflow/csv format
raw_all_test        test raw data selected according to original paper
raw_all_train       train raw data selected according to original paper
raw_attack          attack traffic from raw data (labeled as "botnet" but excluding cases with "-cc")
raw_cc              attack traffic from raw data (labeled as "botnet" and "-cc")
raw_normal     		normal traffic

=============================================================================================================================================================================================================================

Features - Raw
	StartTime = Start Time
	Dur = Duration
	Proto = Protocol
	SrcAddr = Source Address
	Sport = Source Port
	Dir = Direction
	DstAddr = Destination Address
	Dport = Destination Port
	State = State
	sTos = Type of service from source to destination
	dTos = Type of service from destination to source
	TotPkts = Total of Packets
	TotBytes = Total of bytes
	SrcBytes = Total bytes from source to destination
	Label = Label as normal or anomalous

Features - Aggregated
	normal_flow_count 		= count of normal (known) flow
	background_flow_count 	= count of background (unknown) flows
	avg_duration 			= average duration time of flows
	n_conn 					= count of flows
	n_s_a_p_address 		= count of class A source address
	n_d_a_p_address 		= count of class A destination address
	n_s_b_p_address 		= count of class B source address
	n_d_b_p_address 		= count of class B destination address
	n_s_c_p_address 		= count of class C source address
	n_d_c_p_address 		= count of class C destination address
	n_s_na_p_address 		= count of class D* source address. IPs that arent class A, B and C are 'na'. Consirering only public IPs, not A,B,C classes are D. However, internal address will also be classified as 'na'
	n_d_na_p_address 		= count of class D* destination address
	n_icmp 					= count of ICMP packets
	n_tcp 					= count of TCP packets
	n_udp 					= count of UDP packets
	n_dports<1024 			= count of destinations ports lower than 1024
	n_sports<1024 			= count of source ports lower than 1024
	n_sports>1024 			= count of source ports higher than 1024

Attack Types
	CF: Click Fraud; 
	PS: Port Scan; 
	FF: FastFlux; 
	US: Compiled and Controled by Authors
	SPAM
	DDOS

C&C Types
	IRC
	P2P
	HTTP

File Types:
	*.pcap.netflow.labeled
		Has more lines than the description in https://mcfp.weebly.com/the-ctu-13-dataset-a-labeled-dataset-with-botnet-normal-and-background-traffic.html 
		Clear labels for Ligitimate, Background and Botnet, but without indicate C&C traffic
	*.binetflow
		The amount of lines match with the description https://mcfp.weebly.com/the-ctu-13-dataset-a-labeled-dataset-with-botnet-normal-and-background-traffic.html
		label between botnet and background, without information about legitimate.
		CC traffic can be identified from Botnet labels
	*.binetflow.2format
		The amount of lines match with the description in https://mcfp.weebly.com/the-ctu-13-dataset-a-labeled-dataset-with-botnet-normal-and-background-traffic.html 
		More features than .binetflow format

=============================================================================================================================================================================================================================

BinetflowTrainer-master
	Accuracy_on_Bots
		An analysis on detecting various bots. Select scenario by bot, change the interval (1s) and machine learning algorithm (Decision Tree, Random Forest and Tensorflow) to see how well each algorithm does.
		Select files with one target bot and analyse the merged dataset
	Binet_roc_curves
		Evaluate ROC-AUC of algorithms for selected good files and for all files, changing the frame time (0.15, 0.25, 1 and 2 seconds) and the slice for testing
	eigensim_fi_score
		????
	Evaluating_Models
		Point of this notebook is to compare how different algorithms perform on all the files. 
		Change the interval to see how it does in other intervals. But you should leave the machine learning algorithm the same for each section.
		Only implemented for 1s, but it is very easy to change it
		Evaluate the numbers of normal, anomalies, trainging, testing. Also evaluate predicted normal, predicted attack, precision, recall and F1
		*** Sounds like there is some erro for 17.pk1 scenarion since the predicted number of attack and normal are quite similar to the total of cases ***
	FeaturePlotting
		Scatter plot of feature 9 for each scenario with 0.15s, where normal entries are gray and anomalies green
		Intersting scatter plot. Should be better understud?
		we can change it for plotting all features and files
	RandomForest
		Evaluate results and feature importance according to random forest algorithm for all scenarios with aggregation of 0.15s
		Intersting histogram plot with standard deviation 
		We can use this feature importance to select what use in our work. We can sum the importance of each feature for each scenario and use the best
	scramble_feature_mlp_keras
		summirize selected files and run tensorflow keras
	Step Ahead Analysis
		Evaluate the step ahead approach, but it is not important
	Table_Comparisons
		Summary of all important results
	Tuning_Parameters
		Fit with tunned parameters but nod predict
	summarizer
		Implements the data aggregation

=============================================================================================================================================================================================================================

 - we consider botnet traffic the attacks and c&c
 - Original paper: An empirical comparison of botnet detection - computer and security - 2014
	Testing: 1,2,6,8,9
	Training and cross-validation: 3,4,5,7,10,11,12,13
 - The Botnet traffic comes from the infected hosts, the Normal traffic from the verified normal hosts and the Background traffic is all the rest of traffic that we don’t know what it is for sure.
 - The CTU-13 dataset consists in thirteen captures (called scenarios) of different botnet samples. On each scenario we executed a specific malware, which used several protocols and performed different actions.
 - predict compare to train dist or to new dist? Compare to new dist. if it uses the train dist to get threshold the result is very poor, such as classifing all as outlier
 - a diferença está que tradicional mcd define o self.threshold_ e a contaminação a partir do treinamento, nós definimos apenas a contaminação a partir do treinamento, o threshold_ é definido para cada teste a partir do threshold. isto torna a avaliação mais adaptativa
 - Skewness characterizes the degree of asymmetry of a given distribution around its
mean. If the distribution of the data are symmetric then skewness will be close to
0. Positive skewness indicates a distribution with an asymmetric tail extending
toward more positive values. Negative skewness indicates a distribution with an
asymmetric tail extending toward more negative values. 
 - Kurtosis characterizes the relative peakedness or flatness of a distribution
compared with the normal distribution. For normally distributed data the kurtosis
is 0. Positive kurtosis indicates a relatively peaked distribution. Negative kurtosis
indicates a relatively flat distribution. 
 - https://codeburst.io/2-important-statistics-terms-you-need-to-know-in-data-science-skewness-and-kurtosis-388fef94eeaa

 compute skewness and kurtosis inside c-step, so we need to change the c-step.
 	get X_support after iterative min det covariance
 	compute kurtosis and skewness for X_support
 	compute distances as (np.dot(X - kurt1, precision) * (X - kurt1)).sum(axis=1)
 	c-step escolhe algumas observacoes, calcula mean e cov, e computa a distância do X_centered em relacao a este mean e cov. As menores distâncias serão utilizados para computar o próximo mean e cov a partir de X, se o minimum determinant não for alcançado. Se foi alcançado, O mean e conv das observações de menor distância do X_centered vai ser entregue por c-step
 	therefore, we compute skewness and kurtosis from the selected observations with minumum covariance determinant, where this means that this subset has a largest eigenvalue near of the second and that the variance of the dataset is minimal

 mcd is a minimization of covariance matrix determinant
 can we suppose that if MCD is affine equivariant then the skewness of the minumum convariant determinant is a robust skewness of the entire data?